#include <iostream>
#include <bits/stdc++.h> 

/*
fazer a leitura do tuleiro em uma matriz de
caracteres com uma sobra de 2 caracteres para
cada lado e implementar funções para identificar
se um rei k ou K está sendo atacado analizando
as possibilidades de cavalos (ja que podem saltar peças)
deppois checar em todas as direções ate encontrar uma peça.
*/

using namespace std;

char t[12][12] = {}, c;
int d = 0;    
int i,j;
int ki, kj, Ki, Kj;

int rei = 2;

int checkrei(char r, int pi, int pj){    
    // peao, torre, bispo, rainha, cavalo
    char adversario[5] = {'p', 'r', 'b', 'q', 'n'};
    
    if (r == 'k'){
        for (i = 0; i< 5; i++) // converte de minusculo para maiusculo
            adversario[i] = adversario[i] - ('a' - 'A');
        if (t[pi+1][pj-1]== adversario[0] || t[pi+1][pj+1]== adversario[0])
            return 1;        
    }

    if (r == 'K')
        //checa se tem peao dando check
        if (t[pi-1][pj-1]== adversario[0] || t[pi-1][pj+1]== adversario[0])
            return 1;

    //checa se há cavalo dando check no rei
    if (t[pi-2][pj-1]== adversario[4] || t[pi-2][pj+1]== adversario[4] ||
        t[pi-1][pj-2]== adversario[4] || t[pi-1][pj+2]== adversario[4] ||
        t[pi+1][pj-2]== adversario[4] || t[pi+1][pj+2]== adversario[4] ||
        t[pi+2][pj-1]== adversario[4] || t[pi+2][pj+1]== adversario[4])
        return 1;


    //checa para norte
    for (i=pi-1; i>1;i--){
        // check encontrado
        if (t[i][pj] == adversario[1] || t[i][pj] == adversario[3])
            return 1;
        //outra peça que bloqueia o check
        if (t[i][pj]!= '.')
            break; 
    }
    //checa para sul
    for (i=pi+1; i<10;i++){
        if (t[i][pj] == adversario[1] || t[i][pj] == adversario[3])
            return 1;
        if (t[i][pj]!= '.')
            break; 
    }

    //checa para oeste
    for (j=pj-1; j>1;j--){
        if (t[pi][j] == adversario[1] || t[pi][j] == adversario[3])
            return 1;
        if (t[pi][j]!= '.')
            break; 
    }
    //checa para leste
    for (j=pj+1; j<10;j++){
        if (t[pi][j] == adversario[1] || t[pi][j] == adversario[3])
            return 1;
        if (t[pi][j]!= '.')
            break; 
    }


    //checa noroeste NO
    for (i=pi-1, j=pj-1; i>1 && j>1; i--, j--){
        if (t[i][j] == adversario[2] || t[i][j] == adversario[3])
            return 1;
        if (t[i][j]!= '.')
            break; 
    }

    //checa nordeste NE
    for (i=pi-1, j=pj+1; i>1 && j <10; i--, j++){
        if (t[i][j] == adversario[2] || t[i][j] == adversario[3])
            return 1;
        if (t[i][j]!= '.')
            break; 
    }

    //checa sudoeste SO
    for (i=pi+1, j=pj-1; i<10 && j >1; i++, j--){
        if (t[i][j] == adversario[2] || t[i][j] == adversario[3])
            return 1;
        if (t[i][j]!= '.')
            break; 
    }
    //checa sudeste SE
    for (i=pi+1, j=pj+1; i<10 && j <10; i++, j++){
        if (t[i][j] == adversario[2] || t[i][j] == adversario[3])
            return 1;
        if (t[i][j]!= '.')
            break; 
    }

    return 0;
}



int main(){
    
    for(i=0; i<12; i++ )
        for(j=0; j<12; j++ )
            t[i][j]='.';

    while (true){
        rei = 0;
        for(i=2; i<10; i++ ){
            for(j=2; j<10; j++ ){
                cin >> t[i][j];
                if (t[i][j] == 'k'){
                    ki = i;
                    kj = j;
                    rei++;
                }
                if (t[i][j] == 'K'){
                    Ki = i;
                    Kj = j;
                    rei++;
                }   
            }
        }
        //leitura nao possui os reis
        if (rei != 2)
            break;

        d++;
        if (checkrei( t[ki][kj], ki, kj)){
            cout << "Game #"<< d <<": black king is in check." << endl;
        } else if (checkrei( t[Ki][Kj], Ki, Kj)){
            cout << "Game #"<< d <<": white king is in check." << endl;
        } else {
            cout << "Game #"<< d <<": no king is in check." << endl;
        }

    }
    return 0;
}
